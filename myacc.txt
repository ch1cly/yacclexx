%{
#include <stdio.h>	
#include <stdlib.h>
int yylex();
void yyerror(const char *s);
%}


%token yFOR ySTEP yWHILE yLOOP yEXIT yENDFOR yNEXT yVARNAME yTO
%token yPLUS yMINUS yMULT yDIVIDE yEQ
%token <str> yIDENTIFIER
%token <num> yNUMBER 
%token ySEMICOLON
%token yREAD yEXECUTE yWRITE
precedence left UMINUS;

%type <num> exp term

%left yPLUS yMINUS
%left yMULT yDIVIDE






%%
list:            
                 | list stat ySEMICOLON
                 | list stat error { yyerror("semicolon is missing"); }
                 | list error ySEMICOLON { yyerror("wrong statement"); }
		;

stat:            yFOR yVARNAME yEQ exp yTO exp step commandup endfornext
                 ;


commandup: 	
		| commandup commandlow
		| commandup stat
		;

commandlow:	 comm
		| yEXIT
		| yLOOP
		;


step:		| 
		ySTEP exp
		;
		

endfornext: 	yENDFOR 
		|yNEXT
		;


		


comm: 		  yREAD
		| yEXECUTE
		| yVARNAME yEQ exp
		;
		


exp:
                 term
                 | exp yPLUS exp            { $$ = $1 + $3;   }
                 | exp yMINUS exp           { $$ = $1 - $3;   }
                 | exp yMULT exp        { $$ = $1 * $3;   }
                 | exp yDIVIDE exp {
                    if ($3 == 0) {
                        runtime_error("division by zero.");
                    } else {
                        $$ = $1 / $3;
                    }
                  }
                 | yMINUS exp %prec UMINUS  { $$ = -$2;       }
                 ;

term: 
                 yNUMBER                    { $$ = $1; }
                 | yIDENTIFIER {
                    int dst;
                    if (symbol_get_value(&symtab, &dst, $1) == 1) {
                        $$ = dst;
                    } else {
                        char msg[80];
                        sprintf(msg, "unknown identifier %s", $1);
                        runtime_error(msg);
                        $$ = 9999999;
                    }
                  }
                 ;







%%

int main(int argc, char **argv) {
    yyparse();

}




